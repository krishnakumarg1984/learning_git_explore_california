git config --list

HEAD ->  tip of the current branch of the repository

git diff

a/repository_file
b/working_dir_file

git diff --staged
a/repository_file
b/file_in_staging_index

git rm <name_of_file> (using unix rm)
already adds to staging tree ready to commit

git mv old_name new_name

git diff eg. 129,7 means "seeing first line is line 129 with 7 lines in total including context"

in the PAGER, press -S to toggle between chopping long lines and wrapping them

git diff --color-words

For already tracked files, we can simply use git commit --all (git commit -a)

What are the changes in a commit? git show (--color-words optionally)

git diff old_commit..new_commit

remove all untracked files
git clean -n (dry run), -i (interactive), -f (force)

git rm --cached filename (for already tracked files to be ignored using .gitignore)

SHA-1
minimum: 4 characters required

HEAD^
HEAD^^ etc

git ls-tree tree-ish [optional_path/]

blob = binary large object 

Filtering the commit log
------------------------
git log -n or git log -n 5
git log --since=yyyy-mm-dd, or after=
git log --until=yyyy-mm-dd, or before=
can use "3 days ago" or 3.weeks etc
git log --author="any part of author name" (is case sensitive though)
git log --grep="any regex"
git log oldsha..newsha
Powerful:  by changes to a certain file or directory
git log <filename or directory_name>
they can all be combined

Format the commit log
---------------------
git log -p
show all the commits along with the changes  (like browsing git show for all commits)
git log --stat

git log --format=(medium,full,fuller,oneline,short,email,raw)
git log --oneline is better since a shortened sha is used
git log --graph
git log --graph --all --oneline --decorate


Branches
--------

git branch
git branch <branch_name>
git branch
git checkout <branch_name>
git checkout -b <branch_name>  [starting_point]

In the current branch, if there are uncommitted changes to a particular file that also exists in the branch to which you are going (to be checked out), git won't let us do it

cannot switch if changes in the working directory conflict with what is in the other branch
can switch if changes can be applied without conflict (for example, if my changes were to explorers.html, then it wouldn't be a problem)
can switch if files are not being tracked

Resolution
----------
commit to current branch
Remove the changes made (i.e. checkout from the latest commited version)
stash the changes

Compare branches
----------------
git diff master..new_feature (from any branch)
typically put the older branch first

what other branches have their commits merged into this branch already?
git branch --merged
gives a list

git branch --no-merged gives the complement list

to rename a branch: git branch -m [oldbranchname] newbranchname
to delete a branch: git branch -d branchname
to force delete a branch getting rid of any commits: git branch -D branchname

Git Prompt
----------
__git_ps1, if not already installed, can get it from https://github.com/git/git/contrib/completion/git-prompt.sh


Resets
------
soft: simply moves the HEAD pointer. No changes to staging index or working directory
git reset --soft tree-ish
use to return to an old state, but leave code changes staged
Useful for amending commits. Like git commit --amend

mixed: moves HEAD pointer. Changes staging index to match repo. Doesn't affect workdir
leaves code changes in the working directory. Not in the staging

hard: everything changed to a previous point of time
permanently undo commits
Useful for making one branch look like another: git reset --hard branchname

Merges
------
Always merge with a clean working directory. (good advice).
Either commit or stash them

1. git merge --abort
2. can manually merge (git show --color-words while in the MERGING state)
3. Can use a merge tool

keep lines short
small, focused commits 
spaces, tabs, line-returns
merge often
track changes to master often


Stash
-----
git stash save "changed mission page title"
stash doesn't include untracked files by default
need the -u option to include untracked
git stash list
git stash show stash@{0} returns a diff-stat by default
git stash show -p stash@{0} to show the actual changes
stash is independent of the branch that we are on

switch to desired branch, then git stash pop, remove the stash and apply it to our working directory
git stash pop stash@{n} for a specific stash
git stash apply (same as pop, except doesn't delete the stash)

to delete a particular stash item, git stash drop stash@{0}
to clear the stash, git stash clear
